[["index.html", "R for Data Science Book Club Welcome", " R for Data Science Book Club The R4DS Online Learning Community 2021-08-14 Welcome This is a companion for the book R for Data Science by Hadley Wickham and Garrett Grolemund. This companion is available at r4ds.io/r4ds. This website is being developed by the R4DS Online Learning Community. Follow along, and join the community to participate. This companion follows the R4DS Online Learning Community Code of Conduct. "],["book-club-meetings.html", "Book club meetings", " Book club meetings Each week, a volunteer will present a chapter from the book. This is the best way to learn the material. Presentations will usually consist of a review of the material, a discussion, and/or a demonstration of the principles presented in that chapter. More information about how to present is available in the github repo. Presentations will be recorded, and will be available on the R4DS Online Learning Community YouTube Channel. "],["introduction-preface.html", "Chapter 1 Introduction (Preface)", " Chapter 1 Introduction (Preface) The preface gives an overview of what the book covers. Learning objectives: Describe a typical data science project. Explain the reasoning behind the order of content in this book. Recognize topics that are explicitly not covered by this book. Set up an environment in which you can learn the topics in this book. Describe how code in the book differs from code in your console. Recall ways to get help with R code. Produce a minimal reproducible example or reprex. "],["a-typical-data-science-project.html", "1.1 A typical data science project", " 1.1 A typical data science project The data science process Import: Get a data from a file, database, or web app into R. Tidy: Make sure each column in your data is a variable and each row in your data is an observeration. Transform: Filter your data to specific observations, mutate existing columns into new columns, and summarize data. Visualize: Visualization is an important component of data exploration, but usually isn’t very useful for automated processes. Model: Once you know what you’re asking, you can use a model to answer those questions. Models tend to scale well. Communicate: Communication is a critical part of data science! It doesn’t matter how good your models are if nobody knows about them. Program: Programming can aid the entire process, and unlock things that wouldn’t be possible to determine by hand. "],["the-order-of-content-in-this-book.html", "1.2 The order of content in this book", " 1.2 The order of content in this book Import &amp; Tidy are boring, so we jump to visualization &amp; transformation. After that we learn to wrangle (import &amp; tidy) data, because that is a necessary skill. Those baseline skills enables us to start programming. Learning to program helps us simplify the other steps. We might then get into modeling and communicating, or we might pick those up in books that are more specifically devoted to those skills. "],["not-covered-by-this-book.html", "1.3 Not covered by this book", " 1.3 Not covered by this book Big data: Working with big data is problem-specific. If you need to work with big data, other tools will be useful to learn. Python, Julia, etc: This book focuses on R. Master one tool at a time, but maybe go on to other tools later. Non-rectangular data: Honestly even a lot of things that aren’t naturally table-like can be coerced to be table-like, so it makes sense to start with tables. Hypothesis confirmation: This book focuses on exploratory data analysis. "],["setting-up-an-environment.html", "1.4 Setting up an environment", " 1.4 Setting up an environment We’ll need: R Rstudio The tidyverse (install.packages(\"tidyverse\")) Three additional packages (install.packages(c(\"nycflights13\", \"gapminder\", \"Lahman\"))) "],["running-r-code.html", "1.5 Running R code", " 1.5 Running R code Code in the book has some slight differences from code on your console. Don’t freak out. "],["getting-help.html", "1.6 Getting help", " 1.6 Getting help Pay attention to error messages. tidyverse error messages tend to actually be helpful. If you can’t figure out what an error is telling you, copy/paste it into Google. Stackoverflow.com can be helpful, but beware. r4ds.io/join is a friendly Slack community with volunteer R tutors. When you ask for help, make a reprex if possible. State up front what packages you use (we’ll learn about loading packages very soon). Provide (a subset of) any data you use with dput(). Make sure your code is easy to read. Use clean spacing, clear variable names, and comments. #rstats twitter is super active and surprisingly friendly. "],["introduction.html", "Chapter 2 Introduction", " Chapter 2 Introduction In this section, we’ll learn about: Data visualization Data transformation Exploratory data analysis Workflows to organize our thoughts Today we’ll focus on visualization. "],["data-visualisation.html", "Chapter 3 Data visualisation", " Chapter 3 Data visualisation Let’s visualize some data! We learn “The fundamental principles or rules of an art or science” OED Online 1989 Data visualisation: learning the basic structure of a ggplot2 plot Data transformation: select, filter, create, and summarize Exploratory data analysis: combination of visualisation and transformation In the next chapters we will see how modeling is an important part of the exploratory process and focus on R workflow. Learning objectives: Load the tidyverse family of packages Produce a simple plot with {ggplot2} Use aesthetic mappings to produce more complex plots Deal with common R programming problems. Produce small multiples with facet() Combine multiple geom_*() objects to produce more complex plots Recognize the interaction between stats and geoms Use the position argument to control data layout. Use alternative coordinate systems for plots in ggplot2 Describe the components of the layered grammar of graphics "],["loading-packages-in-r.html", "3.1 Loading Packages in R", " 3.1 Loading Packages in R Use install.packages(\"PACKAGE_NAME\") to install a package in R. You need to do this before you can use a package, but you only need to do it once. Depending where you’re learning R, the packages you need may already be installed. Use library(PACKAGE_NAME) to load a package in R. In general, you want to do this at the start of any session where you use a package. Alternatively, you can refer to a package every time you use it, such as ggplot2::ggplot(). “ggplot2” is the package, “ggplot()” is the function call, “::” tells R “look up this function in this package.” library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ## ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ## ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ## ✔ readr 2.0.1 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() "],["first-steps.html", "3.2 First Steps", " 3.2 First Steps 3.2.1 How to visualise your data using ggplot2 “ggplot2 is a plotting system for R, based on the grammar of graphics, which tries to take the good parts of base and lattice graphics and none of the bad parts. It takes care of many of the fiddly details that make plotting a hassle (like drawing legends) as well as providing a powerful model of graphics that makes it easy to produce complex multi-layered graphics.” © Hadley Wickham 2013 The {ggplot2} package is one of the {tidyverse} packages, it lets us build up plots layer by layer. Figure 3.1: ggplot2 package The layered grammar of graphics: to see the structure of a ggplot() ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) ggplot(data = &lt;DATA&gt;): Set up a base plot with data &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)): Add a geometry, such as a point (geom_point()) mapping: Map visual properties (x, y) to variables from data (displ, hwy) aes(): A function to do the mapping. The name is short for “aesthetics.” Spoiler alert: “aesthetics” is the word Hadley uses for “visual properties” Other little things brought out here: Type ?FUNCTION_NAME (`?) to load help for that function (or data object) All {tidyverse} help is also available at tidyverse.org Exercises solution are available at: jrnold.github.io/r4ds-exercise-solutions After having loaded the library you can start building your plot. Let’s start with making an empty plot: ggplot() + geom_blank() The ggplot() function can be used by adding data inside the function as its first argument, and adding a mapping as a second argument: ggplot( data = &lt; some data &gt; , mapping = aes( x = x , y = y )) + &lt;GEOM_FUNCTION&gt;() "],["geometry.html", "3.3 Geometry", " 3.3 Geometry There are several different types of of &lt;GEOM_FUNCTION&gt;: geom_ point (scatterplot) line smooth histogram / bar or (stat_count) / col boxplot map text … "],["aesthetic-mappings.html", "3.4 Aesthetic mappings", " 3.4 Aesthetic mappings Aesthetics are visual properties of objects in the plot. There are several different types of of aesthetic mapping: coordinates: x and y size shape color fill alpha (transparency) stroke linetype group show.legend others, sometimes specific to a geom Use the mapping argument and the aes function to map an aesthetic to a variable in data. Or assign the in the ggplot() function and the mapping in one of the : ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) As an example we load the data provided in {ggplot2}: ggplot2::mpg Display the data head of the first 3 rows: head(mpg,3) ## # A tibble: 3 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compa… ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compa… ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compa… Add a to ggplot(&lt;DATA&gt;) with: ggplot(data=mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;) Here the color appears outside the mapping but what if it will be set inside of it? A super common error: Trying to set the color inside the aes call results in random effects because aes() automatically figures out the necessary scale for your data. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = &quot;blue&quot;)) "],["common-problems.html", "3.5 Common problems", " 3.5 Common problems What is very important when deciding on a visualization of your data? Before you create your visualization, you need to have your data ready. We’ll learn more about these steps in upcoming chapters:``` import your data tidy the data to have your variables ready to display transform the data as needed visualize the data with a plot model communicate One more suggestion would be to sketch down your visualization before hand and then set the data ready and plot it! More tips: The {tidyverse} (the packages described in this book) tend to have really good error messages. Pay attention to what they say! Read the help at ?function_name to see if maybe it doesn’t work how you thought it worked Googling error messages can often help Take a deep breath. You’ve got this! Get practice doing some TidyTuesdays "],["other-function-and-features.html", "3.6 Other function and features", " 3.6 Other function and features Facets Statistical transformations Position adjustments Coordinate systems Themes 3.6.1 Facets They never use this terminology, but… you can subgroup your visualization with a facet_ function: Small multiples: Multiple plots on the same axes comparing something across splits in a dataset There are 2 versions of this function in ggplot2: facet_wrap() the variable that you pass to facet_wrap() should be discrete facet_grid() the formula should contain two variable names separated by a ~ ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) You can either use ~ or vars() 3.6.2 Statistical transformations Lots of geoms use transformed data. For example, geom_bar(aes(x = cut)) calculates a count for each cut. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) stat_*() functions do this calculation. ?stat_count (etc) has a Computer variables section that tells you what that stat computes. You can use these computed variables to make fancier plots. 3.6.3 Position adjustments Geoms have a position argument to tell it how to deal with things that go on top of one another. Sample values include “stack”, “identity”, “fill”, “dodge”, and “jitter”. geom_jitter() is a shortcut for geom_point(position = \"jitter\") because it’s super useful. dat &lt;- tibble( x = rep(1:3, 3), y = rep(1:3, 3) ) ggplot(dat, aes(x, y)) + geom_point() ggplot(dat, aes(x, y)) + geom_jitter() Use width and height arguments of geom_jitter to more specifically specify range. ggplot(dat, aes(x, y)) + geom_jitter(width = 0.1, height = 0.5) 3.6.4 Coordinate systems Add Coordinate systems to your ggplot with: coord_flip() coord_quickmap() coord_polar() coord_fixed() By default, {ggplot} uses coord_cartesian() but you can add other functions: coord_flip() can be useful to quickly flip orientations (although this is less necessary in modern {ggplot} than when this book was written; now there’s an “orientation” argument that is usually guessed properly if you leave it blank) coord_quickmap() does proper transformations to work with lat/long data. coord_polar() for circular plots, which are almost always a bad idea but they tend to look cool coord_fixed() set the same limits to both axis 3.6.5 Theme Once your data are imported, tidied and transformed adeguately for obtaing desired visualization you can start setting up a plot with extra features: ?theme It is possible to add a theme() function to your ggplot, this is done to customize the non-data components of your plots: titles labels fonts background gridlines legends … For example if you would like to customize the background of your plot: ggplot() + geom_blank() + theme(plot.background = element_rect(color = &quot;red&quot;, size = 2, fill = &quot;gold&quot;), panel.background = element_rect(color = &quot;grey&quot;, size = 5, fill = &quot;darkblue&quot;)) Or you can customize a theme_, there are many different themes provided by defauld by ggplo2 such as: theme_classic() theme_minimal() theme_void() just to name a few, those function then can be further customize by adding the theme customization function. "],["to-summarize-the-gg-in-ggplot.html", "3.7 To summarize: The gg in {ggplot}", " 3.7 To summarize: The gg in {ggplot} {ggplot} implements the “layered grammar of graphics.” ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; + &lt;THEME_FUNCTION&gt; + theme() ggplot(data = &lt;DATA&gt;): Set up a base plot with data. &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)): Add a geometry, such as a point (geom_point()). mapping: Map aesthetics (x, y) to variables from data (displ, hwy). stat: How to transform the data. aes(): A function to do the mapping. The name is short for “aesthetics.” position: How to deal with things that overlap. &lt;COORDINATE_FUNCTION&gt;: Adjust the coordinate layout. &lt;FACET_FUNCTION&gt;: Break the plot up into small multiples. In addition it is possible to subset data inside the ggplot() function or inside the &lt;GEOM_FUNCTION&gt;(): ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == &quot;subcompact&quot;), se = FALSE) R4DS book 3.7.1 Exercises: R for Data Science: Exercise Solutions 3.7.2 Resources: A Layered Grammar of Graphics {ggplot2} ggplot2 extensions - gallery R Graphics Cookbook "],["workflow-basics.html", "Chapter 4 Workflow: basics", " Chapter 4 Workflow: basics Learning objectives: Understand the RStudio interface Use the R command line boldly Follow good style conventions when writing code Confidently call functions in R "],["the-console-pane.html", "4.1 The Console Pane", " 4.1 The Console Pane "],["the-script-pane.html", "The Script Pane", " The Script Pane "],["the-environment-pane.html", "The Environment Pane", " The Environment Pane "],["the-other-pane.html", "The Other Pane", " The Other Pane "],["using-the-console.html", "Using the Console", " Using the Console Conceptually, everything we do in R is a series of commands. The console is where we can enter these commands. By default, entering &lt;thing&gt; means “print out &lt;thing&gt;.” 4 ## [1] 4 "],["using-the-console-1.html", "Using the Console", " Using the Console R has some pre-defined named objects: pi ## [1] 3.141593 This one is surprisingly useful: letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; "],["using-the-console-2.html", "Using the Console", " Using the Console What it means to “print out” a thing depends on what kind of thing it is. ggplot2::diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows "],["using-the-console-3.html", "Using the Console", " Using the Console Actually, entering &lt;thing&gt; really means “evaluate and print &lt;thing&gt;.” cos(pi) ## [1] -1 I use R as a desktop calculator a lot. 60*60*24 ## [1] 86400 "],["assigning-names.html", "Assigning Names", " Assigning Names Sometimes you don’t just want to print out a thing, especially if it’s a complex evaluation. You want to save it to a named object so that you can do more stuff with it. Use the assignment arrow (&lt;-) for this. tau &lt;- 2*pi Most programming languages use the equals sign (=) for assignment, and this also works in R. But assignment is really a conceptually distinct thing from mathematical equality, so it makes sense to use a different symbol. It’s a bit more annoying to type, though, so get used to the keyboard shortcut Alt+minus. Objects that you have named will show up in the “Environment” panel. "],["assigning-and-printing.html", "Assigning and Printing", " Assigning and Printing By default, when you make an assignment, the result of the evaluation is not printed in the console. To assign and print in one command, surround the assignment with parentheses: (tau &lt;- 2*pi) ## [1] 6.283185 "],["pronouncing-code.html", "Pronouncing Code", " Pronouncing Code It’s easier to remember and understand a thing if you can say it (either out loud or in your head). A common pronunciation of &lt;- is “gets,” so tau &lt;- 2*pi would be read as “tau gets two times pi.” "],["naming-things.html", "4.2 Naming Things", " 4.2 Naming Things There are only two hard things in computer science: cache invalidation and naming things. And off-by-one errors. Picking good names for things is both harder and more important than you might guess. Having good guidelines for naming things can save you a lot of mental effort down the road. Names in R can only contain letters, numbers, _, and .. R is case-sensitive! And it can’t read your mind. Sticking with a good style convention will make your code more readable, both for others, and for yourself in the future. Some suggestions: Use descriptive names. Long names are ok! Use all lowercase by default, with _ as a separator. student_item_data num_students fall2020_math_courses_with_multiple_sections "],["functions.html", "4.3 Functions", " 4.3 Functions A function in R is like a function in math: it’s a box that takes in input and returns output.1 Functions can take zero, one, or more than one object as input. When you call a function, you specify values (arguments) for the inputs. Evaluating the function call gives the output of the function. length(letters) ## [1] 26 Or: nrow(ggplot2::diamonds) ## [1] 53940 Functions may also have side effects, which is something we can talk about later.↩︎ "],["functions-1.html", "Functions", " Functions The inputs (the function parameters) have names. When you pass in the function arguments, you can do so by name: seq(from = 1, to = 10) ## [1] 1 2 3 4 5 6 7 8 9 10 Specifying names is (usually) optional, but it can make your code more readable, so it’s a good habit to get into. If you name the arguments, it doesn’t matter what order you put them in: seq(to = 10, from = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 If you don’t specify names, the function matches the arguments to the parameters in the order they appear in the function definition. seq(10, 1) ## [1] 10 9 8 7 6 5 4 3 2 1 "],["other-rstudio-features.html", "Other RStudio Features", " Other RStudio Features Explore on your own: tab autocomplete up-arrow to see console history type, then command- (control-) up-arrow to search history alt-shift-k to see lots of shortcuts one of my recent favorites: alt-command-down-arrow (inside a script) "],["data-transformation.html", "Chapter 5 Data transformation", " Chapter 5 Data transformation Learning objectives: Pick out rows of a data frame with the dplyr::filter() function. Sort rows of a data frame with dplyr::arrange(). Pick out columns of a data frame with dplyr::select(). Modify columns of a data frame with dplyr::mutate(). Group rows of a data frame with dplyr::group(). Apply functions to columns of a (grouped) data frame with dplyr::summarize(). Streamline data transformations with the pipe operator (%&gt;%). "],["slide-1.html", "5.1 Slide 1", " 5.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2.html", "5.2 Slide 2", " 5.2 Slide 2 Slide contents. "],["workflow-scripts.html", "Chapter 6 Workflow: scripts", " Chapter 6 Workflow: scripts Learning objectives: Use keyboard shortcuts to use the RStudio script pane efficiently. Understand the script diagnostics that the RStudio script editor provides. "],["slide-1-1.html", "6.1 Slide 1", " 6.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-1.html", "6.2 Slide 2", " 6.2 Slide 2 Slide contents. "],["exploratory-data-analysis.html", "Chapter 7 Exploratory Data Analysis", " Chapter 7 Exploratory Data Analysis Learning objectives: List the two types of questions that will always be useful for making discoveries within your data. Explore the variation within the variables of your observations. Deal with outliers and missing values in your data. Explore the covariation between the variables of your observations. Recognize how models can be used to explore patterns in your data. "],["slide-1-2.html", "7.1 Slide 1", " 7.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-2.html", "7.2 Slide 2", " 7.2 Slide 2 Slide contents. "],["workflow-projects.html", "Chapter 8 Workflow: projects", " Chapter 8 Workflow: projects Learning objectives: Understand how to use Rstudio and the getwd() function to find your working directory. Recognize the similarities and differences between Windows paths and Mac/Linux paths. Create an Rstudio project. "],["slide-1-3.html", "8.1 Slide 1", " 8.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-3.html", "8.2 Slide 2", " 8.2 Slide 2 Slide contents. "],["introduction-1.html", "Chapter 9 Introduction", " Chapter 9 Introduction Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-4.html", "9.1 Slide 1", " 9.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-4.html", "9.2 Slide 2", " 9.2 Slide 2 Slide contents. "],["tibbles.html", "Chapter 10 Tibbles", " Chapter 10 Tibbles Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-5.html", "10.1 Slide 1", " 10.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-5.html", "10.2 Slide 2", " 10.2 Slide 2 Slide contents. "],["data-import.html", "Chapter 11 Data import", " Chapter 11 Data import Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-6.html", "11.1 Slide 1", " 11.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-6.html", "11.2 Slide 2", " 11.2 Slide 2 Slide contents. "],["tidy-data.html", "Chapter 12 Tidy data", " Chapter 12 Tidy data Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-7.html", "12.1 Slide 1", " 12.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-7.html", "12.2 Slide 2", " 12.2 Slide 2 Slide contents. "],["relational-data.html", "Chapter 13 Relational data", " Chapter 13 Relational data Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-8.html", "13.1 Slide 1", " 13.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-8.html", "13.2 Slide 2", " 13.2 Slide 2 Slide contents. "],["strings.html", "Chapter 14 Strings", " Chapter 14 Strings Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-9.html", "14.1 Slide 1", " 14.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-9.html", "14.2 Slide 2", " 14.2 Slide 2 Slide contents. "],["factors.html", "Chapter 15 Factors", " Chapter 15 Factors Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-10.html", "15.1 Slide 1", " 15.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-10.html", "15.2 Slide 2", " 15.2 Slide 2 Slide contents. "],["dates-and-times.html", "Chapter 16 Dates and times", " Chapter 16 Dates and times Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-11.html", "16.1 Slide 1", " 16.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-11.html", "16.2 Slide 2", " 16.2 Slide 2 Slide contents. "],["introduction-2.html", "Chapter 17 Introduction", " Chapter 17 Introduction Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-12.html", "17.1 Slide 1", " 17.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-12.html", "17.2 Slide 2", " 17.2 Slide 2 Slide contents. "],["pipes.html", "Chapter 18 Pipes", " Chapter 18 Pipes Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-13.html", "18.1 Slide 1", " 18.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-13.html", "18.2 Slide 2", " 18.2 Slide 2 Slide contents. "],["functions-2.html", "Chapter 19 Functions", " Chapter 19 Functions Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-14.html", "19.1 Slide 1", " 19.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-14.html", "19.2 Slide 2", " 19.2 Slide 2 Slide contents. "],["vectors.html", "Chapter 20 Vectors", " Chapter 20 Vectors Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-15.html", "20.1 Slide 1", " 20.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-15.html", "20.2 Slide 2", " 20.2 Slide 2 Slide contents. "],["iteration.html", "Chapter 21 Iteration", " Chapter 21 Iteration Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-16.html", "21.1 Slide 1", " 21.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-16.html", "21.2 Slide 2", " 21.2 Slide 2 Slide contents. "],["introduction-3.html", "Chapter 22 Introduction", " Chapter 22 Introduction Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-17.html", "22.1 Slide 1", " 22.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-17.html", "22.2 Slide 2", " 22.2 Slide 2 Slide contents. "],["model-basics.html", "Chapter 23 Model basics", " Chapter 23 Model basics Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-18.html", "23.1 Slide 1", " 23.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-18.html", "23.2 Slide 2", " 23.2 Slide 2 Slide contents. "],["model-building.html", "Chapter 24 Model building", " Chapter 24 Model building Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-19.html", "24.1 Slide 1", " 24.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-19.html", "24.2 Slide 2", " 24.2 Slide 2 Slide contents. "],["many-models.html", "Chapter 25 Many models", " Chapter 25 Many models Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-20.html", "25.1 Slide 1", " 25.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-20.html", "25.2 Slide 2", " 25.2 Slide 2 Slide contents. "],["introduction-4.html", "Chapter 26 Introduction", " Chapter 26 Introduction Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-21.html", "26.1 Slide 1", " 26.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-21.html", "26.2 Slide 2", " 26.2 Slide 2 Slide contents. "],["r-markdown.html", "Chapter 27 R Markdown", " Chapter 27 R Markdown Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-22.html", "27.1 Slide 1", " 27.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-22.html", "27.2 Slide 2", " 27.2 Slide 2 Slide contents. "],["graphics-for-communication.html", "Chapter 28 Graphics for communication", " Chapter 28 Graphics for communication Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-23.html", "28.1 Slide 1", " 28.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-23.html", "28.2 Slide 2", " 28.2 Slide 2 Slide contents. "],["r-markdown-formats.html", "Chapter 29 R Markdown formats", " Chapter 29 R Markdown formats Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-24.html", "29.1 Slide 1", " 29.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-24.html", "29.2 Slide 2", " 29.2 Slide 2 Slide contents. "],["r-markdown-workflow.html", "Chapter 30 R Markdown workflow", " Chapter 30 R Markdown workflow Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-25.html", "30.1 Slide 1", " 30.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-25.html", "30.2 Slide 2", " 30.2 Slide 2 Slide contents. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
