[["index.html", "R for Data Science Book Club Welcome", " R for Data Science Book Club The R4DS Online Learning Community 2021-09-15 Welcome This is a companion for the book R for Data Science by Hadley Wickham and Garrett Grolemund. This companion is available at r4ds.io/r4ds. This website is being developed by the R4DS Online Learning Community. Follow along, and join the community to participate. This companion follows the R4DS Online Learning Community Code of Conduct. "],["book-club-meetings.html", "Book club meetings", " Book club meetings Each week, a volunteer will present a chapter from the book. This is the best way to learn the material. Presentations will usually consist of a review of the material, a discussion, and/or a demonstration of the principles presented in that chapter. More information about how to present is available in the github repo. Presentations will be recorded, and will be available on the R4DS Online Learning Community YouTube Channel. "],["introduction-preface.html", "Chapter 1 Introduction (Preface)", " Chapter 1 Introduction (Preface) The preface gives an overview of what the book covers. Learning objectives: Describe a typical data science project. Explain the reasoning behind the order of content in this book. Recognize topics that are explicitly not covered by this book. Set up an environment in which you can learn the topics in this book. Describe how code in the book differs from code in your console. Recall ways to get help with R code. Produce a minimal reproducible example or reprex. "],["a-typical-data-science-project.html", "1.1 A typical data science project", " 1.1 A typical data science project The data science process Import: Get a data from a file, database, or web app into R. Tidy: Make sure each column in your data is a variable and each row in your data is an observeration. Transform: Filter your data to specific observations, mutate existing columns into new columns, and summarize data. Visualize: Visualization is an important component of data exploration, but usually isn’t very useful for automated processes. Model: Once you know what you’re asking, you can use a model to answer those questions. Models tend to scale well. Communicate: Communication is a critical part of data science! It doesn’t matter how good your models are if nobody knows about them. Program: Programming can aid the entire process, and unlock things that wouldn’t be possible to determine by hand. "],["the-order-of-content-in-this-book.html", "1.2 The order of content in this book", " 1.2 The order of content in this book Import &amp; Tidy are boring, so we jump to visualization &amp; transformation. After that we learn to wrangle (import &amp; tidy) data, because that is a necessary skill. Those baseline skills enables us to start programming. Learning to program helps us simplify the other steps. We might then get into modeling and communicating, or we might pick those up in books that are more specifically devoted to those skills. "],["not-covered-by-this-book.html", "1.3 Not covered by this book", " 1.3 Not covered by this book Big data: Working with big data is problem-specific. If you need to work with big data, other tools will be useful to learn. Python, Julia, etc: This book focuses on R. Master one tool at a time, but maybe go on to other tools later. Non-rectangular data: Honestly even a lot of things that aren’t naturally table-like can be coerced to be table-like, so it makes sense to start with tables. Hypothesis confirmation: This book focuses on exploratory data analysis. "],["setting-up-an-environment.html", "1.4 Setting up an environment", " 1.4 Setting up an environment We’ll need: R Rstudio The tidyverse (install.packages(\"tidyverse\")) Three additional packages (install.packages(c(\"nycflights13\", \"gapminder\", \"Lahman\"))) "],["running-r-code.html", "1.5 Running R code", " 1.5 Running R code Code in the book has some slight differences from code on your console. Don’t freak out. "],["getting-help.html", "1.6 Getting help", " 1.6 Getting help Pay attention to error messages. tidyverse error messages tend to actually be helpful. If you can’t figure out what an error is telling you, copy/paste it into Google. Stackoverflow.com can be helpful, but beware. r4ds.io/join is a friendly Slack community with volunteer R tutors. When you ask for help, make a reprex if possible. State up front what packages you use (we’ll learn about loading packages very soon). Provide (a subset of) any data you use with dput(). Make sure your code is easy to read. Use clean spacing, clear variable names, and comments. #rstats twitter is super active and surprisingly friendly. "],["meeting-videos.html", "1.7 Meeting Videos", " 1.7 Meeting Videos 1.7.1 Cohort 1 Meeting chat log 00:18:00 Morgan Grovenburg: I have to leave early today. Also, I&#39;d normally have my video on, but my kid is currently using me as a jungle gym 00:21:19 Susie Neilson: Link to our team’s work :) https://www.sfchronicle.com/data/ 00:22:40 Morgan Grovenburg: I know what talk you&#39;re talking about 00:23:10 Wai-Yin: Data journalism’s wikipedia article https://en.wikipedia.org/wiki/Data_journalism 00:49:59 Ryan Metcalf: Great question Susie! I consider “Big Data” anything I can’t open in a conventional service. Using scripting languages helps with managing overhead (Cost [not monetary], time of process, processing capability, etc…). 01:00:14 Njoki Njuki Lucy: data.table has the similar syntax as the base R package. 01:17:46 Jon Harmon (jonthegeek): r4ds.io/r4ds "],["introduction.html", "Chapter 2 Introduction", " Chapter 2 Introduction In this section, we’ll learn about: Data visualization Data transformation Exploratory data analysis Workflows to organize our thoughts "],["data-visualisation.html", "Chapter 3 Data visualisation", " Chapter 3 Data visualisation Learning objectives: “The fundamental principles or rules of an art or science” OED Online 1989 Data visualisation: learning the basic structure of a ggplot2 plot Data transformation: select, filter, create, and summarize Exploratory data analysis: combination of visualisation and transformation In the next chapters we will see how modeling is an important part of the exploratory process and focus on R workflow. Learning objectives: Load the tidyverse family of packages Produce a simple plot with {ggplot2} Use aesthetic mappings to produce more complex plots Deal with common R programming problems. Produce small multiples with facet() Combine multiple geom_*() objects to produce more complex plots Recognize the interaction between stats and geoms Use the position argument to control data layout. Use alternative coordinate systems for plots in ggplot2 Describe the components of the layered grammar of graphics "],["loading-packages-in-r.html", "3.1 Loading Packages in R", " 3.1 Loading Packages in R Use install.packages(\"PACKAGE_NAME\") to install a package in R. You need to do this before you can use a package, but you only need to do it once. Depending where you’re learning R, the packages you need may already be installed. Use library(PACKAGE_NAME) to load a package in R. In general, you want to do this at the start of any session where you use a package. Alternatively, you can refer to a package every time you use it, such as ggplot2::ggplot(). “ggplot2” is the package, “ggplot()” is the function call, “::” tells R “look up this function in this package.” library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ## ✔ tibble 3.1.4 ✔ dplyr 1.0.7 ## ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ## ✔ readr 2.0.1 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() "],["first-steps.html", "3.2 First Steps", " 3.2 First Steps 3.2.1 How to visualise your data using ggplot2 “ggplot2 is a plotting system for R, based on the grammar of graphics, which tries to take the good parts of base and lattice graphics and none of the bad parts. It takes care of many of the fiddly details that make plotting a hassle (like drawing legends) as well as providing a powerful model of graphics that makes it easy to produce complex multi-layered graphics.” © Hadley Wickham 2013 The {ggplot2} package is one of the {tidyverse} packages, it lets us build up plots layer by layer. Figure 3.1: ggplot2 package The layered grammar of graphics: to see the structure of a ggplot() ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) ggplot(data = &lt;DATA&gt;): Set up a base plot with data &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)): Add a geometry, such as a point (geom_point()) mapping: Map visual properties (x, y) to variables from data (displ, hwy) aes(): A function to do the mapping. The name is short for “aesthetics.” Spoiler alert: “aesthetics” is the word Hadley uses for “visual properties” Other little things brought out here: Type ?FUNCTION_NAME (`?) to load help for that function (or data object) All {tidyverse} help is also available at tidyverse.org Exercises solution are available at: jrnold.github.io/r4ds-exercise-solutions After having loaded the library you can start building your plot. Let’s start with making an empty plot: ggplot() + geom_blank() The ggplot() function can be used by adding data inside the function as its first argument, and adding a mapping as a second argument: ggplot( data = &lt; some data &gt; , mapping = aes( x = x , y = y )) + &lt;GEOM_FUNCTION&gt;() "],["geometry.html", "3.3 Geometry", " 3.3 Geometry There are several different types of of &lt;GEOM_FUNCTION&gt;: geom_ point (scatterplot) line smooth histogram / bar or (stat_count) / col boxplot map text … "],["aesthetic-mappings.html", "3.4 Aesthetic mappings", " 3.4 Aesthetic mappings Aesthetics are visual properties of objects in the plot. There are several different types of of aesthetic mapping: coordinates: x and y size shape color fill alpha (transparency) stroke linetype group show.legend others, sometimes specific to a geom Use the mapping argument and the aes function to map an aesthetic to a variable in data. Or assign the in the ggplot() function and the mapping in one of the : ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) As an example we load the data provided in {ggplot2}: ggplot2::mpg Display the data head of the first 3 rows: head(mpg,3) ## # A tibble: 3 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compa… ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compa… ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compa… Add a to ggplot(&lt;DATA&gt;) with: ggplot(data=mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;) Here the color appears outside the mapping but what if it will be set inside of it? A super common error: Trying to set the color inside the aes call results in random effects because aes() automatically figures out the necessary scale for your data. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = &quot;blue&quot;)) "],["common-problems.html", "3.5 Common problems", " 3.5 Common problems What is very important when deciding on a visualization of your data? Before you create your visualization, you need to have your data ready. We’ll learn more about these steps in upcoming chapters:``` import your data tidy the data to have your variables ready to display transform the data as needed visualize the data with a plot model communicate One more suggestion would be to sketch down your visualization before hand and then set the data ready and plot it! More tips: The {tidyverse} (the packages described in this book) tend to have really good error messages. Pay attention to what they say! Read the help at ?function_name to see if maybe it doesn’t work how you thought it worked Googling error messages can often help Take a deep breath. You’ve got this! Get practice doing some TidyTuesdays "],["other-function-and-features.html", "3.6 Other function and features", " 3.6 Other function and features Facets Statistical transformations Position adjustments Coordinate systems Themes 3.6.1 Facets They never use this terminology, but… you can subgroup your visualization with a facet_ function: Small multiples: Multiple plots on the same axes comparing something across splits in a dataset There are 2 versions of this function in ggplot2: facet_wrap() the variable that you pass to facet_wrap() should be discrete facet_grid() the formula should contain two variable names separated by a ~ ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) You can either use ~ or vars() 3.6.2 Statistical transformations Lots of geoms use transformed data. For example, geom_bar(aes(x = cut)) calculates a count for each cut. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) stat_*() functions do this calculation. ?stat_count (etc) has a Computer variables section that tells you what that stat computes. You can use these computed variables to make fancier plots. 3.6.3 Position adjustments Geoms have a position argument to tell it how to deal with things that go on top of one another. Sample values include “stack”, “identity”, “fill”, “dodge”, and “jitter”. geom_jitter() is a shortcut for geom_point(position = \"jitter\") because it’s super useful. dat &lt;- tibble( x = rep(1:3, 3), y = rep(1:3, 3) ) ggplot(dat, aes(x, y)) + geom_point() ggplot(dat, aes(x, y)) + geom_jitter() Use width and height arguments of geom_jitter to more specifically specify range. ggplot(dat, aes(x, y)) + geom_jitter(width = 0.1, height = 0.5) 3.6.4 Coordinate systems Add Coordinate systems to your ggplot with: coord_flip() coord_quickmap() coord_polar() coord_fixed() By default, {ggplot} uses coord_cartesian() but you can add other functions: coord_flip() can be useful to quickly flip orientations (although this is less necessary in modern {ggplot} than when this book was written; now there’s an “orientation” argument that is usually guessed properly if you leave it blank) coord_quickmap() does proper transformations to work with lat/long data. coord_polar() for circular plots, which are almost always a bad idea but they tend to look cool coord_fixed() set the same limits to both axis 3.6.5 Theme Once your data are imported, tidied and transformed adeguately for obtaing desired visualization you can start setting up a plot with extra features: ?theme It is possible to add a theme() function to your ggplot, this is done to customize the non-data components of your plots: titles labels fonts background gridlines legends … For example if you would like to customize the background of your plot: ggplot() + geom_blank() + theme(plot.background = element_rect(color = &quot;red&quot;, size = 2, fill = &quot;gold&quot;), panel.background = element_rect(color = &quot;grey&quot;, size = 5, fill = &quot;darkblue&quot;)) Or you can customize a theme_, there are many different themes provided by defauld by ggplo2 such as: theme_classic() theme_minimal() theme_void() just to name a few, those function then can be further customize by adding the theme customization function. "],["to-summarize-the-gg-in-ggplot.html", "3.7 To summarize: The gg in {ggplot}", " 3.7 To summarize: The gg in {ggplot} {ggplot} implements the “layered grammar of graphics.” ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; + &lt;THEME_FUNCTION&gt; + theme() ggplot(data = &lt;DATA&gt;): Set up a base plot with data. &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)): Add a geometry, such as a point (geom_point()). mapping: Map aesthetics (x, y) to variables from data (displ, hwy). stat: How to transform the data. aes(): A function to do the mapping. The name is short for “aesthetics.” position: How to deal with things that overlap. &lt;COORDINATE_FUNCTION&gt;: Adjust the coordinate layout. &lt;FACET_FUNCTION&gt;: Break the plot up into small multiples. In addition it is possible to subset data inside the ggplot() function or inside the &lt;GEOM_FUNCTION&gt;(): ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == &quot;subcompact&quot;), se = FALSE) R4DS book 3.7.1 Exercises: R for Data Science: Exercise Solutions 3.7.2 Resources: A Layered Grammar of Graphics {ggplot2} ggplot2 extensions - gallery R Graphics Cookbook "],["meeting-videos-1.html", "3.8 Meeting Videos", " 3.8 Meeting Videos 3.8.1 Cohort 1 Meeting chat log 00:11:14 Jon Harmon (jonthegeek): r4ds.io/r4ds 00:12:06 Saeed Shafiei Sabet: Hi everyone! 00:12:29 Sandra Muroy: Hi Saeed! 00:13:05 Becki R. (she/her): Hello! 00:13:30 Sandra Muroy: Hi Becki! 00:22:41 Saeed Shafiei Sabet: Can also by using ggplot2 do some 3D surface plots? 00:24:01 shamsuddeen: https://ggplot2.tidyverse.org/reference/geom_contour.html 00:24:12 shamsuddeen: 2D contours of a 3D surface 00:25:34 Saeed Shafiei Sabet: Thanks @shamsuddeen ;) 00:25:50 Jon Harmon (jonthegeek): ggplot2 is 2D. There are other packages for 3D visualization, I&#39;ll try to link some in your question on the Slack once we&#39;re done! 00:26:29 Saeed Shafiei Sabet: @Jon Thanks a lot! :) 00:26:34 shamsuddeen: I guess this package provides 3D plotting https://www.rayshader.com/index.html 00:27:24 Jon Harmon (jonthegeek): Yup, that&#39;s the one I was going to recommend: https://cran.r-project.org/web/packages/rayshader/index.html 00:28:28 Jon Harmon (jonthegeek): I found it super helpful to figure out how to read some of these things as words: %&gt;% = &quot;and then&quot; ~ = &quot;by&quot; (usually) 00:28:30 shamsuddeen: Looks at some practical examples of the package here: https://www.tylermw.com/3d-ggplots-with-rayshader/ 00:29:54 Saeed Shafiei Sabet: Thank you! 00:36:02 docksbox@pm.me: https://jrnold.github.io/r4ds-exercise-solutions/ 00:40:57 Jon Harmon (jonthegeek): ?ggplot2::mpg will show all the details of the dataset 00:41:50 Sandra Muroy: thanks Jon :) 00:42:40 Jon Harmon (jonthegeek): hwy = &quot;highway miles per gallon&quot;, cty = &quot;city miles per gallon&quot; in that set, so usually that&#39;s what you&#39;d want on y. 00:43:38 Becki R. (she/her): Did I hear correctly that the dependent variable goes on the y-axis? 00:44:04 Jon Harmon (jonthegeek): Generally, yes. But it&#39;s whatever you specify as &quot;y&quot; in the &quot;aes&quot; call. 00:44:16 Becki R. (she/her): ok thanks 00:49:24 Jon Harmon (jonthegeek): The &quot;labs&quot; function is for all of the labels for your plot. 00:51:26 Jon Harmon (jonthegeek): https://twitter.com/search?q=%23tidytuesday&amp;src=typed_query 00:51:48 Hector: Is there any specific use for the ggtitle() function in contrast with labs() ? 00:52:09 Njoki Njuki Lucy: what is there a difference between stat=&quot;count&quot; and stat=&quot;identity&quot;? I understand stat = &quot;count returns count per each level. 00:53:23 Jon Harmon (jonthegeek): @Hector: ggtitle is equivalent to labs() for just the title and subtitle parts. It&#39;s just to make it easier to focus on those specific bits. 00:53:56 Jon Harmon (jonthegeek): @Njoki: &quot;count&quot; means &quot;how many entries have this value?&quot;, vs &quot;identity&quot; means &quot;what value is in this cell?&quot; 00:54:59 Hector: Thank you! 00:55:04 Njoki Njuki Lucy: thank you. 00:56:26 Jon Harmon (jonthegeek): &quot;color&quot; = outside, &quot;fill&quot; = inside 00:58:53 docksbox@pm.me: labs() 01:04:36 Ryan Metcalf: Could it be stated that “labs” is a more eloquent way of labeling than explicitly calling each field directly? Less lines of code maybe? 01:05:47 Jon Harmon (jonthegeek): I&#39;m not sure I&#39;d say &quot;eloquent,&quot; but it&#39;s just another option. They provide the separate functions in case you&#39;re looking for them, basically. 01:07:23 Jon Harmon (jonthegeek): Sorry about that! 01:08:23 Susie Neilson: This was a great presentation - thank you so much Federica! 01:12:31 docksbox@pm.me: example would be the use of a map data 01:12:51 Saeed Shafiei Sabet: Thanks Federica :) 01:13:43 docksbox@pm.me: great thanks! 01:13:46 Fodil: thank you everyone was very interesting. 01:13:51 Becki R. (she/her): Thanks, Federica! 01:13:56 Njoki Njuki Lucy: Thank you. 01:13:56 Saeed Shafiei Sabet: Thank you 01:13:58 Saeed Shafiei Sabet: bye "],["workflow-basics.html", "Chapter 4 Workflow: basics", " Chapter 4 Workflow: basics Learning objectives: Understand the RStudio interface Use the R command line boldly Follow good style conventions when writing code Confidently call functions in R "],["the-console-pane.html", "4.1 The Console Pane", " 4.1 The Console Pane "],["the-script-pane.html", "The Script Pane", " The Script Pane "],["the-environment-pane.html", "The Environment Pane", " The Environment Pane "],["the-other-pane.html", "The Other Pane", " The Other Pane "],["using-the-console.html", "Using the Console", " Using the Console Conceptually, everything we do in R is a series of commands. The console is where we can enter these commands. By default, entering &lt;thing&gt; means “print out &lt;thing&gt;.” 4 ## [1] 4 "],["using-the-console-1.html", "Using the Console", " Using the Console R has some pre-defined named objects: pi ## [1] 3.141593 This one is surprisingly useful: letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; "],["using-the-console-2.html", "Using the Console", " Using the Console What it means to “print out” a thing depends on what kind of thing it is. ggplot2::diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows "],["using-the-console-3.html", "Using the Console", " Using the Console Actually, entering &lt;thing&gt; really means “evaluate and print &lt;thing&gt;.” cos(pi) ## [1] -1 I use R as a desktop calculator a lot. 60*60*24 ## [1] 86400 "],["assigning-names.html", "Assigning Names", " Assigning Names Sometimes you don’t just want to print out a thing, especially if it’s a complex evaluation. You want to save it to a named object so that you can do more stuff with it. Use the assignment arrow (&lt;-) for this. tau &lt;- 2*pi Most programming languages use the equals sign (=) for assignment, and this also works in R. But assignment is really a conceptually distinct thing from mathematical equality, so it makes sense to use a different symbol. It’s a bit more annoying to type, though, so get used to the keyboard shortcut Alt+minus. Objects that you have named will show up in the “Environment” panel. "],["assigning-and-printing.html", "Assigning and Printing", " Assigning and Printing By default, when you make an assignment, the result of the evaluation is not printed in the console. To assign and print in one command, surround the assignment with parentheses: (tau &lt;- 2*pi) ## [1] 6.283185 "],["pronouncing-code.html", "Pronouncing Code", " Pronouncing Code It’s easier to remember and understand a thing if you can say it (either out loud or in your head). A common pronunciation of &lt;- is “gets,” so tau &lt;- 2*pi would be read as “tau gets two times pi.” "],["naming-things.html", "4.2 Naming Things", " 4.2 Naming Things There are only two hard things in computer science: cache invalidation and naming things. And off-by-one errors. Picking good names for things is both harder and more important than you might guess. Having good guidelines for naming things can save you a lot of mental effort down the road. Names in R can only contain letters, numbers, _, and .. R is case-sensitive! And it can’t read your mind. Sticking with a good style convention will make your code more readable, both for others, and for yourself in the future. Some suggestions: Use descriptive names. Long names are ok! Use all lowercase by default, with _ as a separator. student_item_data num_students fall2020_math_courses_with_multiple_sections "],["functions.html", "4.3 Functions", " 4.3 Functions A function in R is like a function in math: it’s a box that takes in input and returns output.1 Functions can take zero, one, or more than one object as input. When you call a function, you specify values (arguments) for the inputs. Evaluating the function call gives the output of the function. length(letters) ## [1] 26 Or: nrow(ggplot2::diamonds) ## [1] 53940 Functions may also have side effects, which is something we can talk about later.↩︎ "],["functions-1.html", "Functions", " Functions The inputs (the function parameters) have names. When you pass in the function arguments, you can do so by name: seq(from = 1, to = 10) ## [1] 1 2 3 4 5 6 7 8 9 10 Specifying names is (usually) optional, but it can make your code more readable, so it’s a good habit to get into. If you name the arguments, it doesn’t matter what order you put them in: seq(to = 10, from = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 If you don’t specify names, the function matches the arguments to the parameters in the order they appear in the function definition. seq(10, 1) ## [1] 10 9 8 7 6 5 4 3 2 1 "],["other-rstudio-features.html", "Other RStudio Features", " Other RStudio Features Explore on your own: tab autocomplete up-arrow to see console history type, then command- (control-) up-arrow to search history alt-shift-k to see lots of shortcuts one of my recent favorites: alt-command-down-arrow (inside a script) "],["meeting-videos-2.html", "4.4 Meeting Videos", " 4.4 Meeting Videos 4.4.1 Cohort 1 Meeting chat log 00:14:44 Jon Harmon (jonthegeek): Ignore the URL on these, I should have made my coworker crop those out since it isn&#39;t relevant outside of our work environment 🙃 00:47:00 Jon Harmon (jonthegeek): ?variable.names 00:58:53 Becki R. (she/her): jon_doe is an object? 00:59:05 Wai-Yin: Yes. 01:10:33 Becki R. (she/her): Is there a list of verbal substitutions like &quot;&lt;- = get&quot;? 01:16:05 Jon Harmon (jonthegeek): Not yet! Some more will come up as we go through the book... and I plan on putting something together with them before too long! 01:16:56 Becki R. (she/her): Nice! 01:20:44 docksbox@pm.me: Thanks 01:22:41 Becki R. (she/her): Thanks everyone! I will not be here next week. "],["data-transformation.html", "Chapter 5 Data transformation", " Chapter 5 Data transformation Learning objectives: Pick out rows of a data frame with the dplyr::filter() function. Sort rows of a data frame with dplyr::arrange(). Pick out columns of a data frame with dplyr::select(). Modify columns of a data frame with dplyr::mutate(). Group rows of a data frame with dplyr::group(). Apply functions to columns of a (grouped) data frame with dplyr::summarize(). Streamline data transformations with the pipe operator (%&gt;%). "],["introduction-1.html", "5.1 Introduction", " 5.1 Introduction 5.1.1 Prerequisites dplyr is a package that provides functions to manipulate data frames. Data frame consists of columns (variables) and rows (observations). dplyr is part of the tidyverse. You can install and load the all the packages from tidyverse (ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats) install.packages(&quot;tidyverse&quot;) library(tidyverse) Or just install and load dplyr. install.packages(&quot;dplyr&quot;) library(dplyr) 5.1.2 nycflights13 The data set nycflights13 contains data about flights that departed New York City in 2013. install.packages(&quot;nycflights13&quot;) library(nycflights13) When you use data set for the first time, it’s good practice to quickly browse the data to check if you want to use the data. To view the flights data in the R console. . flights ## # A tibble: 336,776 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## 7 2013 1 1 555 600 -5 913 854 ## 8 2013 1 1 557 600 -3 709 723 ## 9 2013 1 1 557 600 -3 838 846 ## 10 2013 1 1 558 600 -2 753 745 ## # … with 336,766 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; To view the flights data in a spreadsheet-like viewer. View(flights) Use ?flights to open the help viewer to get info about all the variables. ?flights Check the size of the flights data frame using nrow(), ncol(), length(), and dim(). # number of rows nrow(flights) # [1] 336776 # number of columns ncol(flights) # [1] 19 # number of columns length(flights) # [1] 19 # number of rows and columns dim(flights) # [1] 336776 19 get the column names with colnames() colnames(flights) ## [1] &quot;year&quot; &quot;month&quot; &quot;day&quot; &quot;dep_time&quot; ## [5] &quot;sched_dep_time&quot; &quot;dep_delay&quot; &quot;arr_time&quot; &quot;sched_arr_time&quot; ## [9] &quot;arr_delay&quot; &quot;carrier&quot; &quot;flight&quot; &quot;tailnum&quot; ## [13] &quot;origin&quot; &quot;dest&quot; &quot;air_time&quot; &quot;distance&quot; ## [17] &quot;hour&quot; &quot;minute&quot; &quot;time_hour&quot; "],["comparisons-and-logical-operators.html", "5.2 Comparisons and logical operators", " 5.2 Comparisons and logical operators 5.2.1 Comparisons &gt; greater than &gt;= greater than or equal &lt; less than &lt;= less than or equal == equal != not equal In math we use = for equality. In programming we use == for equality, and = for assignment. compare numbers 1 &gt; 2 # [1] FALSE 1 &gt;= 2 # [1] FALSE 1 &lt; 2 # [1] TRUE 1 &lt;= 2 # [1] TRUE 1 == 2 # [1] FALSE 1 != 2 # [1] TRUE compare characters &#39;a&#39; &gt; &#39;b&#39; # [1] FALSE &#39;a&#39; &gt;= &#39;b&#39; # [1] FALSE &#39;a&#39; &lt; &#39;b&#39; # [1] TRUE &#39;a&#39; &lt;= &#39;b&#39; # [1] TRUE &#39;a&#39; == &#39;b&#39; # [1] FALSE &#39;a&#39; != &#39;b&#39; # [1] TRUE Case matters when comparing characters. For English, lowercase letters are less than uppercase letters. &#39;a&#39; &gt; &#39;A&#39; # [1] FALSE &#39;a&#39; &gt;= &#39;A&#39; # [1] FALSE &#39;a&#39; &lt; &#39;A&#39; # [1] TRUE &#39;a&#39; &lt;= &#39;A&#39; # [1] TRUE &#39;a&#39; == &#39;A&#39; # [1] FALSE &#39;a&#39; != &#39;A&#39; # [1] TRUE We can change case when comparing characters. tolower() will change characters to lower case. toupper() will change characters to upper case. tolower(&#39;A&#39;) # [1] &quot;a&quot; toupper(&#39;a&#39;) # [1] &quot;A&quot; &#39;a&#39; == tolower(&#39;A&#39;) # [1] TRUE toupper(&#39;a&#39;) == &#39;A&#39; # [1] TRUE 5.2.2 Logical operators &amp; and; all expressions must be true in order to return true TRUE &amp; TRUE # [1] TRUE TRUE &amp; FALSE # [1] FALSE | or; one or more expressions must be true in order to return true; | is the key above the return key, not lowercase letter l. TRUE | TRUE # [1] TRUE TRUE | FALSE # [1] TRUE ! not; negate the expression !TRUE # [1] FALSE !FALSE # [1] TRUE !!TRUE # [1] TRUE assign objects a &lt;- 1 b &lt;- 5 compare object and numbers a &lt; 3 # [1] TRUE a &gt; 3 # [1] FALSE a == 3 # [1] FALSE a != 3 # [1] TRUE compare objects a &lt; b # [1] TRUE a &gt; b # [1] FALSE a == b # [1] FALSE a != b # [1] TRUE comparison and logical operators a &gt; 3 # [1] FALSE b &gt; 3 # [1] TRUE a &gt; 3 &amp; b &gt; 3 # [1] FALSE a &gt; 3 | b &gt; 3 # [1] TRUE !(a == b) # [1] TRUE "],["filter-rows-with-filter.html", "5.3 Filter rows with filter()", " 5.3 Filter rows with filter() filter() allows you to pick out certain rows (observations) . filter() picks the rows which evaluates to TRUE for all criteria. The first argument to filter() is a data frame, the subsequent arguments are the expressions. Combine comparisons and logical operators on the columns to select rows. # number of rows and columns dim(flights) ## [1] 336776 19 # get the column names colnames(flights) ## [1] &quot;year&quot; &quot;month&quot; &quot;day&quot; &quot;dep_time&quot; ## [5] &quot;sched_dep_time&quot; &quot;dep_delay&quot; &quot;arr_time&quot; &quot;sched_arr_time&quot; ## [9] &quot;arr_delay&quot; &quot;carrier&quot; &quot;flight&quot; &quot;tailnum&quot; ## [13] &quot;origin&quot; &quot;dest&quot; &quot;air_time&quot; &quot;distance&quot; ## [17] &quot;hour&quot; &quot;minute&quot; &quot;time_hour&quot; # select flights from November filter(flights, month == 11) ## # A tibble: 27,268 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 11 1 5 2359 6 352 345 ## 2 2013 11 1 35 2250 105 123 2356 ## 3 2013 11 1 455 500 -5 641 651 ## 4 2013 11 1 539 545 -6 856 827 ## 5 2013 11 1 542 545 -3 831 855 ## 6 2013 11 1 549 600 -11 912 923 ## 7 2013 11 1 550 600 -10 705 659 ## 8 2013 11 1 554 600 -6 659 701 ## 9 2013 11 1 554 600 -6 826 827 ## 10 2013 11 1 554 600 -6 749 751 ## # … with 27,258 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; A tibble: 27,268 × 19 tells you 27,268 rows match the criteria # select flights from December filter(flights, month == 12) ## # A tibble: 28,135 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 12 1 13 2359 14 446 445 ## 2 2013 12 1 17 2359 18 443 437 ## 3 2013 12 1 453 500 -7 636 651 ## 4 2013 12 1 520 515 5 749 808 ## 5 2013 12 1 536 540 -4 845 850 ## 6 2013 12 1 540 550 -10 1005 1027 ## 7 2013 12 1 541 545 -4 734 755 ## 8 2013 12 1 546 545 1 826 835 ## 9 2013 12 1 549 600 -11 648 659 ## 10 2013 12 1 550 600 -10 825 854 ## # … with 28,125 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; # select flights not from December (e.g. January to November) filter(flights, month != 12) ## # A tibble: 308,641 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## 7 2013 1 1 555 600 -5 913 854 ## 8 2013 1 1 557 600 -3 709 723 ## 9 2013 1 1 557 600 -3 838 846 ## 10 2013 1 1 558 600 -2 753 745 ## # … with 308,631 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; # select flights from November or December filter(flights, month == 11 | month == 12) ## # A tibble: 55,403 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 11 1 5 2359 6 352 345 ## 2 2013 11 1 35 2250 105 123 2356 ## 3 2013 11 1 455 500 -5 641 651 ## 4 2013 11 1 539 545 -6 856 827 ## 5 2013 11 1 542 545 -3 831 855 ## 6 2013 11 1 549 600 -11 912 923 ## 7 2013 11 1 550 600 -10 705 659 ## 8 2013 11 1 554 600 -6 659 701 ## 9 2013 11 1 554 600 -6 826 827 ## 10 2013 11 1 554 600 -6 749 751 ## # … with 55,393 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; &amp; (and) vs | (or) # select flights from November or from 1st day of any month filter(flights, month == 11 | day == 1) ## # A tibble: 37,318 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## 7 2013 1 1 555 600 -5 913 854 ## 8 2013 1 1 557 600 -3 709 723 ## 9 2013 1 1 557 600 -3 838 846 ## 10 2013 1 1 558 600 -2 753 745 ## # … with 37,308 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; # select flights from November 1st filter(flights, month == 11 &amp; day == 1) ## # A tibble: 986 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 11 1 5 2359 6 352 345 ## 2 2013 11 1 35 2250 105 123 2356 ## 3 2013 11 1 455 500 -5 641 651 ## 4 2013 11 1 539 545 -6 856 827 ## 5 2013 11 1 542 545 -3 831 855 ## 6 2013 11 1 549 600 -11 912 923 ## 7 2013 11 1 550 600 -10 705 659 ## 8 2013 11 1 554 600 -6 659 701 ## 9 2013 11 1 554 600 -6 826 827 ## 10 2013 11 1 554 600 -6 749 751 ## # … with 976 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, ## # flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, ## # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; If you provide multiple comma-separated expressions, dplyr will automatically use &amp; to combine the expressions. # both will select flights from November 1st filter(flights, month == 11 &amp; day == 1) filter(flights, month == 11, day == 1) dplyr functions do not change the original data. To save the results from a function, you need to assign the results to a object. nov1 &lt;- filter(flights, month == 11, day == 1) nrow(nov1) ## [1] 986 nrow(flights) ## [1] 336776 5.3.1 Missing values Often times, rows will not have data for certain columns. In spreadsheets, csv, tsv, the cells will be blank. In R data frames, the missing values are represented as NA (not available). Operations with NA will return NA. NA &gt; 5 # [1] NA 10 == NA # [1] NA NA + 10 # [1] NA NA / 2 # [1] NA NA == NA # [1] NA To check if value is missing use is.na() is.na(NA) # [1] TRUE By default, filter() excludes NA values. To include NA values, you must add an expression. tibble is the tidyverse version of a data frame. tibble haves some extra functions that normal data frames do not have. # create a tibble with a column named &quot;x&quot;, with 3 values df &lt;- tibble(x = c(1, NA, 3)) df ## # A tibble: 3 × 1 ## x ## &lt;dbl&gt; ## 1 1 ## 2 NA ## 3 3 # select rows with values greater than 1 filter(df, x &gt; 1) ## # A tibble: 1 × 1 ## x ## &lt;dbl&gt; ## 1 3 # select rows with NA or values greater than 1 filter(df, is.na(x) | x &gt; 1) ## # A tibble: 2 × 1 ## x ## &lt;dbl&gt; ## 1 NA ## 2 3 "],["arrange-rows-with-arrange.html", "5.4 Arrange rows with arrange()", " 5.4 Arrange rows with arrange() arrange() changes the order of the rows. The first argument to arrange() is a data frame, the subsequent arguments are columns names are expression used to sort the rows. Ascending (small to big) is the default order. Use desc() for descending order (big to small). # sort flights by depature delay using ascending order arrange(flights, dep_delay) ## # A tibble: 336,776 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 12 7 2040 2123 -43 40 2352 ## 2 2013 2 3 2022 2055 -33 2240 2338 ## 3 2013 11 10 1408 1440 -32 1549 1559 ## 4 2013 1 11 1900 1930 -30 2233 2243 ## 5 2013 1 29 1703 1730 -27 1947 1957 ## 6 2013 8 9 729 755 -26 1002 955 ## 7 2013 10 23 1907 1932 -25 2143 2143 ## 8 2013 3 30 2030 2055 -25 2213 2250 ## 9 2013 3 2 1431 1455 -24 1601 1631 ## 10 2013 5 5 934 958 -24 1225 1309 ## # … with 336,766 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; # sort flights by depature delay using descending order. arrange(flights, desc(dep_delay)) ## # A tibble: 336,776 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 9 641 900 1301 1242 1530 ## 2 2013 6 15 1432 1935 1137 1607 2120 ## 3 2013 1 10 1121 1635 1126 1239 1810 ## 4 2013 9 20 1139 1845 1014 1457 2210 ## 5 2013 7 22 845 1600 1005 1044 1815 ## 6 2013 4 10 1100 1900 960 1342 2211 ## 7 2013 3 17 2321 810 911 135 1020 ## 8 2013 6 27 959 1900 899 1236 2226 ## 9 2013 7 22 2257 759 898 121 1026 ## 10 2013 12 5 756 1700 896 1058 2020 ## # … with 336,766 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; sort by multiple columns # sort flights by year, month, and day using ascending order arrange(flights, year, month, day) ## # A tibble: 336,776 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## 7 2013 1 1 555 600 -5 913 854 ## 8 2013 1 1 557 600 -3 709 723 ## 9 2013 1 1 557 600 -3 838 846 ## 10 2013 1 1 558 600 -2 753 745 ## # … with 336,766 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; arrange() puts NA values at the end. # create tibble with 3 values df &lt;- tibble(x = c(1, NA, 3)) # sort puts NA at the end arrange(df, x) ## # A tibble: 3 × 1 ## x ## &lt;dbl&gt; ## 1 1 ## 2 3 ## 3 NA "],["select-columns-with-select.html", "5.5 Select columns with select()", " 5.5 Select columns with select() select() lets you pick which columns (variables) to use. The first argument to select() is a data frame, the subsequent arguments are columns to use. # colnames() retrieves the column names colnames(flights) ## [1] &quot;year&quot; &quot;month&quot; &quot;day&quot; &quot;dep_time&quot; ## [5] &quot;sched_dep_time&quot; &quot;dep_delay&quot; &quot;arr_time&quot; &quot;sched_arr_time&quot; ## [9] &quot;arr_delay&quot; &quot;carrier&quot; &quot;flight&quot; &quot;tailnum&quot; ## [13] &quot;origin&quot; &quot;dest&quot; &quot;air_time&quot; &quot;distance&quot; ## [17] &quot;hour&quot; &quot;minute&quot; &quot;time_hour&quot; the order you list the columns will determine the order of the columns returned by select(). # select year, month, and day columns. select(flights, year, month, day) ## # A tibble: 336,776 × 3 ## year month day ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 ## 2 2013 1 1 ## 3 2013 1 1 ## 4 2013 1 1 ## 5 2013 1 1 ## 6 2013 1 1 ## 7 2013 1 1 ## 8 2013 1 1 ## 9 2013 1 1 ## 10 2013 1 1 ## # … with 336,766 more rows # use &#39;:&#39; to select columns from year to day (inclusive). select(flights, year:day) ## # A tibble: 336,776 × 3 ## year month day ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 ## 2 2013 1 1 ## 3 2013 1 1 ## 4 2013 1 1 ## 5 2013 1 1 ## 6 2013 1 1 ## 7 2013 1 1 ## 8 2013 1 1 ## 9 2013 1 1 ## 10 2013 1 1 ## # … with 336,766 more rows # use &#39;-&#39; to select columns except from year to day (inclusive). select(flights, -(year:day)) ## # A tibble: 336,776 × 16 ## dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 517 515 2 830 819 11 UA ## 2 533 529 4 850 830 20 UA ## 3 542 540 2 923 850 33 AA ## 4 544 545 -1 1004 1022 -18 B6 ## 5 554 600 -6 812 837 -25 DL ## 6 554 558 -4 740 728 12 UA ## 7 555 600 -5 913 854 19 B6 ## 8 557 600 -3 709 723 -14 EV ## 9 557 600 -3 838 846 -8 B6 ## 10 558 600 -2 753 745 8 AA ## # … with 336,766 more rows, and 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; helper functions for select() starts_with() # select columns that start with &quot;dep&quot; select(flights, starts_with(&quot;dep&quot;)) ## # A tibble: 336,776 × 2 ## dep_time dep_delay ## &lt;int&gt; &lt;dbl&gt; ## 1 517 2 ## 2 533 4 ## 3 542 2 ## 4 544 -1 ## 5 554 -6 ## 6 554 -4 ## 7 555 -5 ## 8 557 -3 ## 9 557 -3 ## 10 558 -2 ## # … with 336,766 more rows ends_with() # select columns that end with &quot;delay&quot; select(flights, ends_with(&quot;delay&quot;)) ## # A tibble: 336,776 × 2 ## dep_delay arr_delay ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2 11 ## 2 4 20 ## 3 2 33 ## 4 -1 -18 ## 5 -6 -25 ## 6 -4 12 ## 7 -5 19 ## 8 -3 -14 ## 9 -3 -8 ## 10 -2 8 ## # … with 336,766 more rows contains() # select columns that contain &quot;dep&quot; select(flights, contains(&quot;dep&quot;)) ## # A tibble: 336,776 × 3 ## dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 517 515 2 ## 2 533 529 4 ## 3 542 540 2 ## 4 544 545 -1 ## 5 554 600 -6 ## 6 554 558 -4 ## 7 555 600 -5 ## 8 557 600 -3 ## 9 557 600 -3 ## 10 558 600 -2 ## # … with 336,766 more rows matches() # select columns that matches regular expression. # &quot;^a(.)r&quot; means it starts with a, has any character, and then r. select(flights, matches(&quot;^a(.)r&quot;)) ## # A tibble: 336,776 × 3 ## arr_time arr_delay air_time ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 830 11 227 ## 2 850 20 227 ## 3 923 33 160 ## 4 1004 -18 183 ## 5 812 -25 116 ## 6 740 12 150 ## 7 913 19 158 ## 8 709 -14 53 ## 9 838 -8 140 ## 10 753 8 138 ## # … with 336,766 more rows num_range() # create tibble with columns x1, x2, x3, x4 df &lt;- tibble(x1 = c(1, 2), x2 = c(2, 3), x3 = c(4, 5), x4 = c(6, 7)) # select column that matches x1, x2 and x3 select(df, num_range(&quot;x&quot;, 1:3)) ## # A tibble: 2 × 3 ## x1 x2 x3 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 4 ## 2 2 3 5 rename() changes the column names. rename(data_frame, new_name = old_name) # rename the column dep_time to departure_time rename(flights, departure_time = dep_time) ## # A tibble: 336,776 × 19 ## year month day departure_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 542 540 2 923 ## 4 2013 1 1 544 545 -1 1004 ## 5 2013 1 1 554 600 -6 812 ## 6 2013 1 1 554 558 -4 740 ## 7 2013 1 1 555 600 -5 913 ## 8 2013 1 1 557 600 -3 709 ## 9 2013 1 1 557 600 -3 838 ## 10 2013 1 1 558 600 -2 753 ## # … with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, ## # dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; use select() and everything() to move some columns to start of the dataframe # rearrange columns to time_hour, air_time, rest of the columns select(flights, time_hour, air_time, everything()) ## # A tibble: 336,776 × 19 ## time_hour air_time year month day dep_time sched_dep_time ## &lt;dttm&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013-01-01 05:00:00 227 2013 1 1 517 515 ## 2 2013-01-01 05:00:00 227 2013 1 1 533 529 ## 3 2013-01-01 05:00:00 160 2013 1 1 542 540 ## 4 2013-01-01 05:00:00 183 2013 1 1 544 545 ## 5 2013-01-01 06:00:00 116 2013 1 1 554 600 ## 6 2013-01-01 05:00:00 150 2013 1 1 554 558 ## 7 2013-01-01 06:00:00 158 2013 1 1 555 600 ## 8 2013-01-01 06:00:00 53 2013 1 1 557 600 ## 9 2013-01-01 06:00:00 140 2013 1 1 557 600 ## 10 2013-01-01 06:00:00 138 2013 1 1 558 600 ## # … with 336,766 more rows, and 12 more variables: dep_delay &lt;dbl&gt;, ## # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, ## # flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;, ## # hour &lt;dbl&gt;, minute &lt;dbl&gt; "],["add-new-variables-with-mutate.html", "5.6 Add new variables with mutate()", " 5.6 Add new variables with mutate() mutate() adds new columns based on values from existing columns. Data frame includes existing and new columns. # create data frame with 7 columns: year, month, day, dep_delay, arr_delay, distance, air_time flights_7_columns &lt;- select(flights, year:day, ends_with(&quot;delay&quot;), distance, air_time ) # calculate and add columns for gain, hours, and gain_per_hour mutate(flights_7_columns, gain = dep_delay - arr_delay, hours = air_time / 60, gain_per_hour = gain / hours ) ## # A tibble: 336,776 × 10 ## year month day dep_delay arr_delay distance air_time gain hours ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 227 -9 3.78 ## 2 2013 1 1 4 20 1416 227 -16 3.78 ## 3 2013 1 1 2 33 1089 160 -31 2.67 ## 4 2013 1 1 -1 -18 1576 183 17 3.05 ## 5 2013 1 1 -6 -25 762 116 19 1.93 ## 6 2013 1 1 -4 12 719 150 -16 2.5 ## 7 2013 1 1 -5 19 1065 158 -24 2.63 ## 8 2013 1 1 -3 -14 229 53 11 0.883 ## 9 2013 1 1 -3 -8 944 140 5 2.33 ## 10 2013 1 1 -2 8 733 138 -10 2.3 ## # … with 336,766 more rows, and 1 more variable: gain_per_hour &lt;dbl&gt; transmute() adds new columns based on values from existing columns. Data frame only includes new columns. # calculate and add columns for gain, hours, and gain_per_hour transmute(flights_7_columns, gain = dep_delay - arr_delay, hours = air_time / 60, gain_per_hour = gain / hours ) ## # A tibble: 336,776 × 3 ## gain hours gain_per_hour ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -9 3.78 -2.38 ## 2 -16 3.78 -4.23 ## 3 -31 2.67 -11.6 ## 4 17 3.05 5.57 ## 5 19 1.93 9.83 ## 6 -16 2.5 -6.4 ## 7 -24 2.63 -9.11 ## 8 11 0.883 12.5 ## 9 5 2.33 2.14 ## 10 -10 2.3 -4.35 ## # … with 336,766 more rows 5.6.1 Useful creation functions There are many functions to use with mutate(). The function must be vectorised: it must take a vector of values as input, return a vector with the same number of values as output. Arithmetic operators: +, -, *, /, ^ aggregate functions: sum, mean Modular arithmetic: %/% (integer division) and %% (remainder) Logs: log(), log2(), log10() Offsets: lead() leading values; lag() lagging values. Cumulative and rolling aggregates: cumsum() cumulative sums, cumprod() cumulative products, cummin() cumulative min, cummax() cumulative max, cummean() cumulative means. Logical comparisons: &lt;, &lt;=, &gt;, &gt;=, !=, and == Ranking: min_rank(x) gives ranks from smallest to largest. min_rank(desc(x)) gives ranks from largest to smallest. row_number(), dense_rank(), percent_rank(), cume_dist(), ntile(). Testing out various functions to see what they do. transmute(flights, dep_time, arr_time, # Modular arithmetic dep_hour = dep_time %/% 100, dep_minute = dep_time %% 100, # Arithmetic duration = arr_time - dep_time, # logs log_duration = log2(duration), # Offsets lead_duration = lead(duration) ) ## Warning in mask$eval_all_mutate(quo): NaNs produced ## # A tibble: 336,776 × 7 ## dep_time arr_time dep_hour dep_minute duration log_duration lead_duration ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 517 830 5 17 313 8.29 317 ## 2 533 850 5 33 317 8.31 381 ## 3 542 923 5 42 381 8.57 460 ## 4 544 1004 5 44 460 8.85 258 ## 5 554 812 5 54 258 8.01 186 ## 6 554 740 5 54 186 7.54 358 ## 7 555 913 5 55 358 8.48 152 ## 8 557 709 5 57 152 7.25 281 ## 9 557 838 5 57 281 8.13 195 ## 10 558 753 5 58 195 7.61 291 ## # … with 336,766 more rows transmute(flights, dep_time, arr_time, # Arithmetic duration = arr_time - dep_time, # Cumulative aggregates cumsum_duration = cumsum(duration), # Logical comparisons long_duration = duration &gt; 300, # Ranking rank_duration = min_rank(duration) ) ## # A tibble: 336,776 × 6 ## dep_time arr_time duration cumsum_duration long_duration rank_duration ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;lgl&gt; &lt;int&gt; ## 1 517 830 313 313 TRUE 285919 ## 2 533 850 317 630 TRUE 290078 ## 3 542 923 381 1011 TRUE 317071 ## 4 544 1004 460 1471 TRUE 325198 ## 5 554 812 258 1729 FALSE 199982 ## 6 554 740 186 1915 FALSE 114148 ## 7 555 913 358 2273 TRUE 307731 ## 8 557 709 152 2425 FALSE 77988 ## 9 557 838 281 2706 FALSE 224583 ## 10 558 753 195 2901 FALSE 129730 ## # … with 336,766 more rows "],["grouped-summaries-with-summarize.html", "5.7 Grouped summaries with summarize()", " 5.7 Grouped summaries with summarize() summarize() or summarise() collapses a data frame to a single row By default, summarize includes NA values. summarize() will return NA if any values are NA. # calculate the mean departure delay for all the flights. Include NA. summarize(flights, delay = mean(dep_delay)) ## # A tibble: 1 × 1 ## delay ## &lt;dbl&gt; ## 1 NA Need to use na.rm = TRUE to remove NA values. # calculate the mean departure delay for all the flights. Remove NA. summarize(flights, delay = mean(dep_delay, na.rm = TRUE)) ## # A tibble: 1 × 1 ## delay ## &lt;dbl&gt; ## 1 12.6 You use nrow(), filter(), and is.na() check the number of NA values for a column. # total rows in flights nrow(flights) ## [1] 336776 # [1] 336776 # rows where dep_delay is NA nrow(filter(flights, is.na(dep_delay))) ## [1] 8255 # [1] 8255 # rows where dep_delay has a value nrow(filter(flights, !is.na(dep_delay))) ## [1] 328521 # [1] 328521 Use summarize() and group_by() to calculate values for each group. # group flights by year, month and day to get daily flights by_day &lt;- group_by(flights, year, month, day) # calculate mean departure delay for each day summarize(by_day, delay = mean(dep_delay, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # … with 355 more rows 5.7.1 Combining multiple operations with the pipe Use pipe %&gt;% to perform multiple operations on a data set. Do step 1, and then do step 2… pipe makes code more readable. # groyup flights by day, and then calculate mean departure delay for each day flights %&gt;% group_by(year, month, day) %&gt;% summarize(delay = mean(dep_delay, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # … with 355 more rows 5.7.2 Counts Whenever you do any aggregation, you should include a count of values n(), or a count of non-missing values sum(!is.na(x)) to check number of items per group. # get flights that were not cancelled not_cancelled &lt;- flights %&gt;% filter(!is.na(dep_delay), !is.na(arr_delay)) # group flights by tail number, and then calculate mean arrival delay and number of not canceled flights for each tail number delays &lt;- not_cancelled %&gt;% group_by(tailnum) %&gt;% summarize( delay = mean(arr_delay, na.rm = TRUE), n = n() ) delays ## # A tibble: 4,037 × 3 ## tailnum delay n ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 D942DN 31.5 4 ## 2 N0EGMQ 9.98 352 ## 3 N10156 12.7 145 ## 4 N102UW 2.94 48 ## 5 N103US -6.93 46 ## 6 N104UW 1.80 46 ## 7 N10575 20.7 269 ## 8 N105UW -0.267 45 ## 9 N107US -5.73 41 ## 10 N108UW -1.25 60 ## # … with 4,027 more rows combine dplyr with ggplot to rearrange and plot data. dplyr and rest of tidyverse uses %\\&gt;%; ggplot uses + # pick the delayed flights with more than 25 flights, and then plot the flights. delays %&gt;% filter(n &gt; 25) %&gt;% ggplot(mapping = aes(x = n, y = delay)) + geom_point(alpha = 1/10) 5.7.3 Useful summary functions Many functions can be used with summarize() Measures of location: median(x) value where 50% of x is above it, and 50% is below it. Measures of spread: sd(x) standard deviation is the standard measure of spread. interquartile range IQR(x) and median absolute deviation mad(x) are good if there are outliers. Measures of rank: min(x), quantile(x, 0.25), max(x) Measures of position: first(x), nth(x, 2), last(x). Counts: n() returns the size of the current group. sum(!is.na(x)) returns the number of non-missing values. n_distinct(x) returns the number of unique values. count() is a shortcut for group_by() and summarize() to return count by group. # count the number of flights per destination not_cancelled %&gt;% group_by(dest) %&gt;% summarize(n = n()) ## # A tibble: 104 × 2 ## dest n ## &lt;chr&gt; &lt;int&gt; ## 1 ABQ 254 ## 2 ACK 264 ## 3 ALB 418 ## 4 ANC 8 ## 5 ATL 16837 ## 6 AUS 2411 ## 7 AVL 261 ## 8 BDL 412 ## 9 BGR 358 ## 10 BHM 269 ## # … with 94 more rows # count the number of flights per destination not_cancelled %&gt;% count(dest) ## # A tibble: 104 × 2 ## dest n ## &lt;chr&gt; &lt;int&gt; ## 1 ABQ 254 ## 2 ACK 264 ## 3 ALB 418 ## 4 ANC 8 ## 5 ATL 16837 ## 6 AUS 2411 ## 7 AVL 261 ## 8 BDL 412 ## 9 BGR 358 ## 10 BHM 269 ## # … with 94 more rows use sort=TRUE with count() to sort the counts # count the number of flights per destination, and sort the results not_cancelled %&gt;% count(dest, sort=TRUE) ## # A tibble: 104 × 2 ## dest n ## &lt;chr&gt; &lt;int&gt; ## 1 ATL 16837 ## 2 ORD 16566 ## 3 LAX 16026 ## 4 BOS 15022 ## 5 MCO 13967 ## 6 CLT 13674 ## 7 SFO 13173 ## 8 FLL 11897 ## 9 MIA 11593 ## 10 DCA 9111 ## # … with 94 more rows optionally provide a weight variable to get a sum of that variable. # get the total number of miles planes flew for each destination not_cancelled %&gt;% count(dest, wt = distance) ## # A tibble: 104 × 2 ## dest n ## &lt;chr&gt; &lt;dbl&gt; ## 1 ABQ 463804 ## 2 ACK 52536 ## 3 ALB 59774 ## 4 ANC 26960 ## 5 ATL 12747938 ## 6 AUS 3650862 ## 7 AVL 152323 ## 8 BDL 47792 ## 9 BGR 135324 ## 10 BHM 232953 ## # … with 94 more rows When used with numeric functions, TRUE is converted to 1 and FALSE is converted to 0. sum(TRUE) # [1] 1 sum(5 &gt; 0) # [1] 1 sum(FALSE) # [1] 0 sum(5 &lt; 0) # [1] 0 Counts and proportions of logical values: sum(x) gives the number of TRUEs, and mean(x) gives the proportion of TRUEs. # number of flight per day delayed by more than an 60 minutes not_cancelled %&gt;% group_by(year, month, day) %&gt;% summarize(hour_count = sum(arr_delay &gt; 60)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day hour_count ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 60 ## 2 2013 1 2 79 ## 3 2013 1 3 51 ## 4 2013 1 4 36 ## 5 2013 1 5 25 ## 6 2013 1 6 39 ## 7 2013 1 7 31 ## 8 2013 1 8 19 ## 9 2013 1 9 18 ## 10 2013 1 10 17 ## # … with 355 more rows # proportion of flights per day delayed by more than an 60 minutes not_cancelled %&gt;% group_by(year, month, day) %&gt;% summarize(hour_prop = mean(arr_delay &gt; 60)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day hour_prop ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 0.0722 ## 2 2013 1 2 0.0851 ## 3 2013 1 3 0.0567 ## 4 2013 1 4 0.0396 ## 5 2013 1 5 0.0349 ## 6 2013 1 6 0.0470 ## 7 2013 1 7 0.0333 ## 8 2013 1 8 0.0213 ## 9 2013 1 9 0.0202 ## 10 2013 1 10 0.0183 ## # … with 355 more rows 5.7.4 Grouping by multiple variables progressively rolling up summaries for sums and counts # group flights by day daily &lt;- group_by(flights, year, month, day) # number flights per day (per_day &lt;- summarize(daily, flights = n())) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day flights ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 842 ## 2 2013 1 2 943 ## 3 2013 1 3 914 ## 4 2013 1 4 915 ## 5 2013 1 5 720 ## 6 2013 1 6 832 ## 7 2013 1 7 933 ## 8 2013 1 8 899 ## 9 2013 1 9 902 ## 10 2013 1 10 932 ## # … with 355 more rows # number flights per month (per_month &lt;- summarize(per_day, flights = sum(flights))) ## `summarise()` has grouped output by &#39;year&#39;. You can override using the `.groups` argument. ## # A tibble: 12 × 3 ## # Groups: year [1] ## year month flights ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 27004 ## 2 2013 2 24951 ## 3 2013 3 28834 ## 4 2013 4 28330 ## 5 2013 5 28796 ## 6 2013 6 28243 ## 7 2013 7 29425 ## 8 2013 8 29327 ## 9 2013 9 27574 ## 10 2013 10 28889 ## 11 2013 11 27268 ## 12 2013 12 28135 # number of flights per year (per_year &lt;- summarize(per_month, flights = sum(flights))) ## # A tibble: 1 × 2 ## year flights ## &lt;int&gt; &lt;int&gt; ## 1 2013 336776 5.7.5 Ungrouping ungroup() removes grouping. # ungroup the daily flights to count the total number of flights daily %&gt;% ungroup() %&gt;% summarize(flights = n()) ## # A tibble: 1 × 1 ## flights ## &lt;int&gt; ## 1 336776 If during analysis the data doesn’t look right, you can try to use ungroup() to check if the data was previously grouped. "],["grouped-mutates-and-filters.html", "5.8 Grouped mutates (and filters)", " 5.8 Grouped mutates (and filters) use group() with mutate() and filter() # get the flights with the top 10 largest arrival delays per day top_delay &lt;- flights_7_columns %&gt;% group_by(year, month, day) %&gt;% filter(rank(desc(arr_delay)) &lt;= 10) top_delay ## # A tibble: 3,609 × 7 ## # Groups: year, month, day [365] ## year month day dep_delay arr_delay distance air_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 853 851 184 41 ## 2 2013 1 1 290 338 1134 213 ## 3 2013 1 1 260 263 266 46 ## 4 2013 1 1 155 166 277 68 ## 5 2013 1 1 157 174 213 60 ## 6 2013 1 1 216 222 708 121 ## 7 2013 1 1 255 250 589 115 ## 8 2013 1 1 285 246 1085 146 ## 9 2013 1 1 192 191 199 44 ## 10 2013 1 1 379 456 1092 222 ## # … with 3,599 more rows # add rank column, and sort the rows by day and rank to check if top_delay # is returning what we expect top_delay %&gt;% mutate(rank = rank(desc(arr_delay)) ) %&gt;% arrange(year, month, day, rank) ## # A tibble: 3,609 × 8 ## # Groups: year, month, day [365] ## year month day dep_delay arr_delay distance air_time rank ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 853 851 184 41 1 ## 2 2013 1 1 379 456 1092 222 2 ## 3 2013 1 1 290 338 1134 213 3 ## 4 2013 1 1 260 263 266 46 4 ## 5 2013 1 1 255 250 589 115 5 ## 6 2013 1 1 285 246 1085 146 6 ## 7 2013 1 1 216 222 708 121 7 ## 8 2013 1 1 192 191 199 44 8 ## 9 2013 1 1 157 174 213 60 9 ## 10 2013 1 1 155 166 277 68 10 ## # … with 3,599 more rows "],["meeting-videos-3.html", "5.9 Meeting Videos", " 5.9 Meeting Videos 5.9.1 Cohort 1 Meeting chat log 00:13:48 Jon Harmon (jonthegeek): &quot;dplyr&quot; as in &quot;data plyer&quot; (tools for working with data) 00:22:03 Ryan Metcalf: I call the | as “handlebar”…may be my own lingo too. 00:22:20 lucus w: I like vbar 00:38:30 Ryan Metcalf: Quick thought, on dat ingestion, does the tidyverse convert null to NA? Or an alternative, does is.na look for null too? 00:39:19 Jon Harmon (jonthegeek): Null coming in from a database will convert to NA. NULL specifically means &quot;does not exist,&quot; and can&#39;t be inside a vector of numbers in R. It&#39;s its own data type in R. 00:39:24 lucus w: I believe NA and NULL aren’t the same thing, so I’d guess no 00:39:53 Njoki Njuki Lucy: can one use filter to remove na? 00:40:01 Ryan Metcalf: 👍🏻 00:40:45 lucus w: filter(!is.na(x)) wil do the trick 00:40:51 Jon Harmon (jonthegeek): filter(flights, !is.na(month)) would remove NA rows. 00:41:05 Jon Harmon (jonthegeek): Lucus beat me to it :D 00:42:22 Njoki Njuki Lucy: awesome, thank you both :) 00:46:06 Jon Harmon (jonthegeek): Chapter 14 has more on regular expressions. 00:47:03 Jon Harmon (jonthegeek): https://regexr.com/ 00:58:04 lucus w: I wish all aggregate functions would have na.rm = TRUE as a default 01:04:21 lucus w: is magrittr a function or just an operator 01:04:35 lucus w: %&gt;% 01:04:38 Jon Harmon (jonthegeek): If you&#39;re curious why the pipe package is called magrittr: https://en.wikipedia.org/wiki/The_Treachery_of_Images#/media/File:MagrittePipe.jpg 01:05:02 Jon Harmon (jonthegeek): magrittr is the package which exports the %&gt;% function (but it&#39;s a special kind of function because it can go in the middle of its arguments) 01:16:15 Eileen: Great presentation 01:16:17 Ryan Metcalf: Great job! 01:16:34 LG: Thank you! 01:16:46 Njoki Njuki Lucy: Thank you! 01:17:40 Eileen: Thank you! "],["workflow-scripts.html", "Chapter 6 Workflow: scripts", " Chapter 6 Workflow: scripts Learning objectives: Use keyboard shortcuts to use the RStudio script pane efficiently. Understand the script diagnostics that the RStudio script editor provides. "],["meeting-videos-4.html", "6.1 Meeting Videos", " 6.1 Meeting Videos 6.1.1 Cohort 1 Meeting chat log 00:40:51 Becki R. (she/her): It works both ways, I think. It&#39;s just convention to use &lt;-. 00:45:11 Wai-Yin: You can use &lt;- or = for assignment. &lt;- is the convention in R. -&gt; results in ab error. 00:58:59 lucus w: https://www.rocker-project.org/ 01:01:43 Bruno A. Machado: tks Lucus for the link 👍 01:13:48 Susie N.: I have to head out! Thank you Ryan for the great breakdown 01:14:07 Federica Gazzelloni: Thanks! 01:14:19 Becki R. (she/her): Thanks everyone, see you next week! 01:17:04 Bruno A. Machado: tks team 01:17:21 Eileen Murphy: Thank you Ryan "],["exploratory-data-analysis.html", "Chapter 7 Exploratory Data Analysis ", " Chapter 7 Exploratory Data Analysis "],["learning-objectives.html", "7.1 Learning objectives", " 7.1 Learning objectives Recognize the two types of questions that will always be useful for making discoveries within your data: “What type of variation occurs within my variables?” and “What type of covariation occurs between my variables?” Explore the variation within the variables of your observations. Deal with outliers and missing values in your data. Explore the covariation between the variables of your observations. Recognize how models can be used to explore patterns in your data. "],["overall-vocabulary.html", "7.2 Overall Vocabulary", " 7.2 Overall Vocabulary variable: a quantity, quality, or property that you can measure. value: the state of a variable when you measure it. Can change. observation: a set of measurements made under similar conditions. One value per variable. tabular data: observations of variables. tidy data: 1 observation per row, 1 variable per column, 1 value per cell. Definition of “tidy” for a dataset can depend on what you’re trying to answer. "],["variation.html", "7.3 Variation", " 7.3 Variation variation: the tendency of values of a variable to change between measurements. categorical variable: can only take certain values. Visualize variation with bar chart. ggplot(data = diamonds) + aes(x = cut) + geom_bar() continuous variables: can take on infinite set of ordered values. Visualize variation with histogram. ggplot(data = diamonds) + aes(x = carat) + geom_histogram(binwidth = 0.5) geom_freqpoly is geom_histogram alternative that doesn’t show bars. Reminder: the %&gt;% pipe = “and then”. {ggplot2} uses + to add layers, read it as “with” or “and”. smaller &lt;- diamonds %&gt;% filter(carat &lt; 3) ggplot(smaller) + aes(x = carat, colour = cut) + geom_freqpoly(binwidth = 0.1) Use the visualizations to develop questions! Which values are the most common? Why? Which values are rare? Why? Does that match your expectations? Can you see any unusual patterns? What might explain them? ggplot(smaller, mapping = aes(x = carat)) + geom_histogram(binwidth = 0.01) Subgroups create more questions: How are the observations within each cluster similar to each other? How are the observations in separate clusters different from each other? How can you explain or describe the clusters? Why might the appearance of clusters be misleading? Use coord_cartesian to zoom in to see unusual values. Can be ok to drop weird values, especially if you can explain where they came from. Always disclose that you did that, though. "],["missing-values-1.html", "7.4 Missing values", " 7.4 Missing values 2 options to deal with weird values: Drop the entire row. &lt;– probably don’t do this Replace bad data with NA. diamonds2 &lt;- diamonds %&gt;% mutate(y = ifelse(y &lt; 3 | y &gt; 20, NA, y)) {ggplot2} will give a warning when values are missing, can suppress with na.rm = TRUE. "],["covariation.html", "7.5 Covariation", " 7.5 Covariation covariation: tendency of values of different variables to vary together in a related way. Visualizing covariance depends on types of variables in the pair: 7.5.1 categorical + continuous x = categorical y = continuous. geom_boxplot Lots of options exist to do this better. See Cedric Scherer’s tutorial! 7.5.2 categorical + categorical geom_count dplyr::count then geom_tile 7.5.3 continuous + continuous geom_point geom_bin2d geom_hex "],["finding-patterns.html", "7.6 Finding Patterns", " 7.6 Finding Patterns Ask yourself: Could this pattern be due to coincidence (i.e. random chance)? How can you describe the relationship implied by the pattern? How strong is the relationship implied by the pattern? What other variables might affect the relationship? Does the relationship change if you look at individual subgroups of the data? "],["simplified-ggplot2.html", "7.7 Simplified ggplot2", " 7.7 Simplified ggplot2 ggplot(data = faithful, mapping = aes(x = eruptions)) + geom_freqpoly(binwidth = 0.25) ggplot(faithful, aes(eruptions)) + geom_freqpoly(binwidth = 0.25) # Or Jon&#39;s crazy way ggplot(faithful) + aes(eruptions) + geom_freqpoly(binwidth = 0.25) "],["learning-more.html", "7.8 Learning More", " 7.8 Learning More r4ds.io/join for more book clubs! R Graph Gallery The Graphs section of the R Cookbook "],["meeting-videos-5.html", "7.9 Meeting Videos", " 7.9 Meeting Videos 7.9.1 Cohort 1 Meeting chat log 00:13:43 Njoki Njuki Lucy: Is it best to visualize the variation in a categorical variable with only two levels using a bar chart? If not, what&#39;s the chart to use if I may ask? 00:16:00 Ryan Metcalf: Great question Njoki, Categorical, by definition is a set that a variable can have. Say, Male / Female / Other. This example indicates a variable can have three states. It depends on your data set. 00:16:51 Eileen: bar or pie chart? 00:16:51 Ryan Metcalf: There are other forms of presentation other than a bar chart. I.E “quantifying” each category. 00:18:37 Eileen: box chart 00:18:46 Njoki Njuki Lucy: thank you so much everyone :) 00:24:31 lucus w: This website is excellent in determining geom to use: www.data-to-viz.com 00:25:22 Njoki Njuki Lucy: awesome, thanks 00:25:44 Eileen: Box charts are great for showing outliers 00:26:31 Federica Gazzelloni: other interesting resources: 00:26:34 Federica Gazzelloni: https://www.r-graph-gallery.com/ggplot2-package.html 00:26:51 Federica Gazzelloni: http://www.cookbook-r.com/Graphs/ 00:34:19 Amitrajit: what is the difference in putting aes() inside geom_count() rather than main ggplot() call? 00:35:38 Ryan Metcalf: Like maybe Supply vs Demand curves? 00:41:16 Federica Gazzelloni: what about the factor() that we add to a variable when we apply a color? 00:42:33 Susie Neilson: I do aes your way Jon! 00:43:07 Federica Gazzelloni: and grouping inside the aes 00:49:27 Amitrajit: thanks! 00:49:32 Federica Gazzelloni: thanks 00:49:35 Njoki Njuki Lucy: thank you, bye 00:49:45 Eileen: Thank you! "],["workflow-projects.html", "Chapter 8 Workflow: projects", " Chapter 8 Workflow: projects Learning objectives: Understand how to use Rstudio and the getwd() function to find your working directory. Recognize the similarities and differences between Windows paths and Mac/Linux paths. Create an Rstudio project. "],["meeting-videos-6.html", "8.1 Meeting Videos", " 8.1 Meeting Videos 8.1.1 Cohort 1 Meeting chat log 00:05:55 docksbox@pm.me: Hello! 00:07:40 Becki R. (she/her): Hello! 00:07:52 Sandra Muroy: Hi! 00:07:57 Federica Gazzelloni: Hi! 00:09:49 Eileen: Hello! 00:15:44 Becki R. (she/her): Very cool! 00:29:31 Jon Harmon (jonthegeek): https://CRAN.R-project.org/package=renv 00:31:35 lucus w: Or just here::here() package, it’s my favorite 00:32:48 Ryan Metcalf: Ah, Thank you Lucas! I think you may have solved an error I was trying to overcome! 00:32:57 Jon Harmon (jonthegeek): here::here(&quot;my_dir&quot;, &quot;myfile.R&quot;) 00:33:06 lucus w: There you go, yup 00:34:37 Jon Harmon (jonthegeek): usethis 00:34:38 lucus w: You can use usethis 00:37:56 Jon Harmon (jonthegeek): .Last.value 00:38:58 lucus w: It’s a life saver especially working in databases 00:44:32 Federica Gazzelloni: reticulate 00:45:11 Federica Gazzelloni: https://rstudio.github.io/reticulate/articles/r_markdown.html 00:48:18 Ryan Metcalf: @Shamsuddeen, what was that command again? Cmd + Shift + P? 00:48:40 Susan Neilson: That’s right 00:49:43 Ryan Metcalf: Awesome! Ive never used that before. These bookclub meetups are so helpful! Thank you everyone! 00:50:04 Federica Gazzelloni: yep! very useful 00:50:09 Shamsuddeen Muhammad: https://speakerdeck.com/jennybc/how-to-name-files 00:50:28 Shamsuddeen Muhammad: Naming things 00:51:10 Jon Harmon (jonthegeek): 20210904 00:51:55 Shamsuddeen Muhammad: Chapter 2 Project-oriented workflow : https://rstats.wtf/project-oriented-workflow.html 00:52:13 Jon Harmon (jonthegeek): Had to google that tab: https://bookdown.org/ndphillips/YaRrr/ 00:52:15 Shamsuddeen Muhammad: What They Forgot to Teach You About R 00:55:05 Jon Harmon (jonthegeek): https://github.com/MonkmanMH/EIKIFJB 00:55:38 Ryan Metcalf: Transmute I think….. 00:56:27 Jon Harmon (jonthegeek): tidyr::replace_na() 00:56:54 lucus w: Check out janitor 01:02:32 Shamsuddeen Muhammad: https://tidyr.tidyverse.org/reference/replace_na.html 01:02:42 Shamsuddeen Muhammad: df %&gt;% dplyr::mutate(x = replace_na(x, 0)) 01:03:30 Jon Harmon (jonthegeek): &quot;&quot; 01:04:16 Ryan Metcalf: You’ve discovered the beauty of a programmer!!! 01:04:28 Shamsuddeen Muhammad: Yes Yes !!! 01:05:22 Susan Neilson: “95% of being a programmer is knowing how to Google” - my programmer friend 01:06:27 Ryan Metcalf: I find googling the package and then reading the PDF Manual. CRAN is your friend. 01:10:38 Sandra Muroy: thanks everyone for your input! 01:10:57 Ryan Metcalf: Thank you Susie! Great presentation and conversation! 01:11:04 Susan Neilson: Thanks everyone ! 01:11:08 Federica Gazzelloni: thanks 01:11:12 Becki R. (she/her): Thank you! 01:11:22 Susan Neilson: https://bookdown.org/ndphillips/YaRrr/rdata-files.html "],["introduction-2.html", "Chapter 9 Introduction", " Chapter 9 Introduction Learning objectives: Understand how data wrangling fits into the typical data science project. "],["slide-1.html", "9.1 Slide 1", " 9.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2.html", "9.2 Slide 2", " 9.2 Slide 2 Slide contents. "],["tibbles.html", "Chapter 10 Tibbles", " Chapter 10 Tibbles Learning objectives: Create tibbles in various ways. Compare and contrast tibbles with base R data.frames. Convert a tibble back to a data.frame, when needed. "],["slide-1-1.html", "10.1 Slide 1", " 10.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-1.html", "10.2 Slide 2", " 10.2 Slide 2 Slide contents. "],["data-import.html", "Chapter 11 Data import", " Chapter 11 Data import Learning objectives: Read data from disk using the readr::read_*() family of functions. Compare and contrast the read_*() functions with the base R equivalents. Parse character data into other data types using the readr::parse_*() functions. List the complications that can arise when parsing numerical strings. Understand how the various character encodings can make it tricky to parse characters. Describe the common conventions used for date/time data. Diagnose problems that may arise when using the read_*() functions. Write data to disk using the readr::write_*() family of functions. "],["slide-1-2.html", "11.1 Slide 1", " 11.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-2.html", "11.2 Slide 2", " 11.2 Slide 2 Slide contents. "],["tidy-data.html", "Chapter 12 Tidy data", " Chapter 12 Tidy data Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-3.html", "12.1 Slide 1", " 12.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-3.html", "12.2 Slide 2", " 12.2 Slide 2 Slide contents. "],["relational-data.html", "Chapter 13 Relational data", " Chapter 13 Relational data Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-4.html", "13.1 Slide 1", " 13.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-4.html", "13.2 Slide 2", " 13.2 Slide 2 Slide contents. "],["strings.html", "Chapter 14 Strings", " Chapter 14 Strings Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-5.html", "14.1 Slide 1", " 14.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-5.html", "14.2 Slide 2", " 14.2 Slide 2 Slide contents. "],["factors.html", "Chapter 15 Factors", " Chapter 15 Factors Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-6.html", "15.1 Slide 1", " 15.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-6.html", "15.2 Slide 2", " 15.2 Slide 2 Slide contents. "],["dates-and-times.html", "Chapter 16 Dates and times", " Chapter 16 Dates and times Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-7.html", "16.1 Slide 1", " 16.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-7.html", "16.2 Slide 2", " 16.2 Slide 2 Slide contents. "],["introduction-3.html", "Chapter 17 Introduction", " Chapter 17 Introduction Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-8.html", "17.1 Slide 1", " 17.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-8.html", "17.2 Slide 2", " 17.2 Slide 2 Slide contents. "],["pipes.html", "Chapter 18 Pipes", " Chapter 18 Pipes Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-9.html", "18.1 Slide 1", " 18.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-9.html", "18.2 Slide 2", " 18.2 Slide 2 Slide contents. "],["functions-2.html", "Chapter 19 Functions", " Chapter 19 Functions Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-10.html", "19.1 Slide 1", " 19.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-10.html", "19.2 Slide 2", " 19.2 Slide 2 Slide contents. "],["vectors.html", "Chapter 20 Vectors", " Chapter 20 Vectors Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-11.html", "20.1 Slide 1", " 20.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-11.html", "20.2 Slide 2", " 20.2 Slide 2 Slide contents. "],["iteration.html", "Chapter 21 Iteration", " Chapter 21 Iteration Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-12.html", "21.1 Slide 1", " 21.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-12.html", "21.2 Slide 2", " 21.2 Slide 2 Slide contents. "],["introduction-4.html", "Chapter 22 Introduction", " Chapter 22 Introduction Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-13.html", "22.1 Slide 1", " 22.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-13.html", "22.2 Slide 2", " 22.2 Slide 2 Slide contents. "],["model-basics.html", "Chapter 23 Model basics", " Chapter 23 Model basics Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-14.html", "23.1 Slide 1", " 23.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-14.html", "23.2 Slide 2", " 23.2 Slide 2 Slide contents. "],["model-building.html", "Chapter 24 Model building", " Chapter 24 Model building Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-15.html", "24.1 Slide 1", " 24.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-15.html", "24.2 Slide 2", " 24.2 Slide 2 Slide contents. "],["many-models.html", "Chapter 25 Many models", " Chapter 25 Many models Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-16.html", "25.1 Slide 1", " 25.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-16.html", "25.2 Slide 2", " 25.2 Slide 2 Slide contents. "],["introduction-5.html", "Chapter 26 Introduction", " Chapter 26 Introduction Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-17.html", "26.1 Slide 1", " 26.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-17.html", "26.2 Slide 2", " 26.2 Slide 2 Slide contents. "],["r-markdown.html", "Chapter 27 R Markdown", " Chapter 27 R Markdown Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-18.html", "27.1 Slide 1", " 27.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-18.html", "27.2 Slide 2", " 27.2 Slide 2 Slide contents. "],["graphics-for-communication.html", "Chapter 28 Graphics for communication", " Chapter 28 Graphics for communication Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-19.html", "28.1 Slide 1", " 28.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-19.html", "28.2 Slide 2", " 28.2 Slide 2 Slide contents. "],["r-markdown-formats.html", "Chapter 29 R Markdown formats", " Chapter 29 R Markdown formats Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-20.html", "29.1 Slide 1", " 29.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-20.html", "29.2 Slide 2", " 29.2 Slide 2 Slide contents. "],["r-markdown-workflow.html", "Chapter 30 R Markdown workflow", " Chapter 30 R Markdown workflow Learning objectives: Jon will try to prefill these ahead of each week. "],["slide-1-21.html", "30.1 Slide 1", " 30.1 Slide 1 Slide contents. Keep it short and slide-like! "],["slide-2-21.html", "30.2 Slide 2", " 30.2 Slide 2 Slide contents. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
